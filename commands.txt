docker buildx build --platform linux/amd64 -t prasadreddy2349/aks-python-azure-blob-reader --push --no-cache .

az aks show --resource-group aks-rg --name demo-aks --query "oidcIssuerProfile.issuerUrl" -o tsv

https://aws.amazon.com/blogs/security/how-to-access-aws-resources-from-microsoft-entra-id-tenants-using-aws-security-token-service/


az identity federated-credential create --name "azure-access-managed-identity-federated-cred" --identity-name "azure-access-managed-identity" --resource-group "aks-rg" --issuer "<add_oidc_issuerUrl"> --subject system:serviceaccount:"default":"azure-access-managed-identity-sa"


kubectl get pods

kubectl logs pod_name

kubectl exec -it az-cli-deployment-7dfdd5987d-bb7fq -- /bin/bash  

kubectl exec -it az-cli-deployment-7dfdd5987d-hv56j -- sh

env | grep -i azure

kubectl scale deployment az-cli-deployment --replicas=0

kubectl apply -f python-aks-blob-deployment.yml

kubectl scale deployment python-aks-blob-deployment --replicas=0

kubectl delete deployment python-aks-blob-deployment

kubectl rollout restart deployment/python-aks-blob-deployment

az login --identity

az storage blob list --account-name demoakstgacc123 --container-name test-container --output table --auth-mode login


Create the OIDC Identity Provider in AWS

aws iam create-open-id-connect-provider \
  --url https://oidc.prod-aks.azure.com/<cluster-guid> \
  --client-id-list api://AzureADTokenExchange \
  --thumbprint-list <THUMBPRINT_FROM_ABOVE>


Now Create the IAM Role via AWS Console or CLI

AWS Console > IAM > Roles > Create Role

Trusted entity type: Web Identity

Identity Provider: Select the AKS OIDC provider you created

Audience: api://AzureADTokenExchange

Then:

Add a Condition with the sub value (matches Azure identity):

"Condition": {
  "StringEquals": {
    "oidc.prod-aks.azure.com/<cluster-guid>:sub": "system:serviceaccount:<namespace>:<serviceaccount>"
  }
}

Then attach your S3 permissions (e.g., AmazonS3ReadOnlyAccess), and create the role.

kubectl exec -it aws-cli-test -- env | grep AWS_

"Condition": {
  "StringEquals": {
    "oidc.prod-aks.azure.com/abcd1234:sub": "system:serviceaccount:default:s3-access-sa"
  }
}

kubectl exec -it aks-pod-to-s3-access -n default -- aws sts get-caller-identity


kubectl logs aks-pod-to-s3-access -n default

kubectl exec -it aks-pod-to-s3-access -n default -- env | grep AWS_

kubectl exec -it aks-pod-to-s3-access -n default -- sh

//Verify AWS Identity
aws sts get-caller-identity

aws s3 ls

aws s3 ls s3://test-s3-bucket-access-from-aks-pod --recursive


kubectl exec -it aks-pod-to-s3-access-using-app-reg -n default -- sh

aws sts assume-role-with-web-identity --role-arn arn:aws:iam::aws_account_number:role/aws_role --role-session-name aks-session --web-identity-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)"

aws sts assume-role-with-web-identity --role-arn $AWS_ROLE_ARN --role-session-name aks-session --web-identity-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)"

Check the environment variables
echo $AWS_ROLE_ARN
echo $AWS_WEB_IDENTITY_TOKEN_FILE

Check if the token file exists and has content
ls -l /var/run/secrets/azure/tokens/
cat /var/run/secrets/azure/tokens/azure-identity-token | head -n 3